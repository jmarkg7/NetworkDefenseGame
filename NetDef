using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class NetworkDefenseGame : MonoBehaviour
{
    public GameObject firewallPrefab;
    public GameObject routerPrefab;
    public GameObject endpointPrefab;
    public Transform networkArea;
    public Text scoreText;
    public Text alertText;

    private int score = 0;
    private float attackInterval = 10f;
    private List<GameObject> defenses = new List<GameObject>();

    void Start()
    {
        UpdateScore();
        StartCoroutine(ThreatAttackRoutine());
    }

    void Update()
    {
        HandleTouchOrClick();  // This will handle click/touch input
    }

    // Handles user input (click/touch) to place defenses
    public void HandleTouchOrClick()
    {
        if (Input.GetMouseButtonDown(0)) // Detect mouse click or touch (for mobile)
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition); // Convert screen position to world position
            RaycastHit hit;
            if (Physics.Raycast(ray, out hit)) // Check for raycast hit
            {
                if (hit.collider.CompareTag("NetworkArea")) // Check if the raycast hit the NetworkArea
                {
                    PlaceDefense("firewall"); // Example, you can replace with dynamic input (e.g., choose between firewall, router, etc.)
                }
            }
        }
    }

    // Places a defense (firewall, router, endpoint) at the location of the mouse click/touch
    public void PlaceDefense(string type)
    {
        GameObject prefab = null;
        switch (type)
        {
            case "firewall":
                prefab = firewallPrefab;
                break;
            case "router":
                prefab = routerPrefab;
                break;
            case "endpoint":
                prefab = endpointPrefab;
                break;
        }

        if (prefab != null)
        {
            GameObject defense = Instantiate(prefab, networkArea);  // Instantiate the selected prefab at the network area
            defenses.Add(defense);  // Add the defense to the list
        }
    }

    // Simulates an attack on the network at regular intervals
    private IEnumerator ThreatAttackRoutine()
    {
        while (true)
        {
            yield return new WaitForSeconds(attackInterval); // Wait for the attack interval before the next attack
            SimulateAttack();  // Simulate the attack
        }
    }

    // Simulate a breach in the defense system
    private void SimulateAttack()
    {
        if (defenses.Count > 0)
        {
            int randomIndex = Random.Range(0, defenses.Count); // Randomly select a defense to destroy
            GameObject target = defenses[randomIndex];
            Destroy(target);  // Destroy the selected defense
            defenses.RemoveAt(randomIndex);  // Remove the destroyed defense from the list
            alertText.text = "Threat breached a defense!";  // Alert message
        }
        else
        {
            alertText.text = "Critical breach! Network compromised!";  // Alert if all defenses are breached
        }
    }

    // Updates the score when defenses are placed or when attacks happen
    private void UpdateScore()
    {
        score += 10;  // Increase score (this can be modified based on your game logic)
        scoreText.text = "Score: " + score;  // Update the score text in the UI
    }
}
